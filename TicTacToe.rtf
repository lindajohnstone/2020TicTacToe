{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18300\viewh14920\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 TicTacToe\
\
TDD Principles \
- test first\
- fail fast\
- refactor\
- repeat\
\
Four rules of simple design\
- passes tests\
- reveals intention\
- no duplication\
- fewest elements\
\
Command Query Separation\
- every method is either does (action) or answers (query) something\
\
Object Composition\
- classes or interfaces used to share functionality between classes\
- use instances of these classes\
- functionality exposed by using instances\
\
====================================================\
Tasks\
   One player\
1 Initialise board - Here\'92s the current board (board drawn) 5SP \
2 Input from player - message to user and ask for input 1SP\
3 set input values to array values (-1 for all) - test ** - another option: 4 x 4 array 3SP\
4 output move accepted + board displayed 2SP\
5 is this a win 3SP\
=====\
Notes 30/8\
- reuse InitialiseBoard method: if statement checking state of array??\
- count moves?\
=====\
2, 4, 5 loop\
validate input, ie int comma int (1,1) - test\
     validate range - test -\
- 1st iteration pattern to win \
- - set array\
validate \
   calculate position\
- create board - a dot for each position using array \'91points\'92\
- display board\
- greeting - \'93Welcome to TicTacToe\'94\
- instructions - initial and error (\'91Oh no, a piece is already at this place! Try again\'85\'92)\
- game over messages - win, draw, quit\
- check if marking position means a win for player\
	- all fields in column taken by player\
	- all fields in row taken by player\
	- all fields in a diagonal taken by player\
- check if game is drawn\
	- all fields are taken\
- game exits when input = \'91q\'92\
- board is 3 x 3\
Input, compute, output\
Several validators, loop \
==\
Algorithms = how to determine who has won; when board is full, game is drawn and over\
==\
\
Array\
0,0		0,1		0,2\
1,0		1,1		1,2\
2,0		2,1		2,2\
\
- need to be input as (pos1 + 1, pos2 +1)\
\
==\
\
Classes\
- board\
- calculations\
- validations\
- constants - includes messages\
- positions\
\
\
}